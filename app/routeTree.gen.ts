/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as authLoginRouteImport } from './routes/(auth)/login/route'
import { Route as authCreateAccountRouteImport } from './routes/(auth)/create-account/route'
import { Route as appRecordsRouteImport } from './routes/(app)/records/route'
import { Route as appIndexRouteImport } from './routes/(app)/index/route'

// Create/Update Routes

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRouteRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const authCreateAccountRouteRoute = authCreateAccountRouteImport.update({
  id: '/create-account',
  path: '/create-account',
  getParentRoute: () => authRouteRoute,
} as any)

const appRecordsRouteRoute = appRecordsRouteImport.update({
  id: '/records',
  path: '/records',
  getParentRoute: () => appRouteRoute,
} as any)

const appIndexRouteRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/records': {
      id: '/(app)/records'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof appRecordsRouteImport
      parentRoute: typeof appRouteImport
    }
    '/(auth)/create-account': {
      id: '/(auth)/create-account'
      path: '/create-account'
      fullPath: '/create-account'
      preLoaderRoute: typeof authCreateAccountRouteImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteImport
    }
  }
}

// Create and export the route tree

interface appRouteRouteChildren {
  appIndexRouteRoute: typeof appIndexRouteRoute
  appRecordsRouteRoute: typeof appRecordsRouteRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appIndexRouteRoute: appIndexRouteRoute,
  appRecordsRouteRoute: appRecordsRouteRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authCreateAccountRouteRoute: typeof authCreateAccountRouteRoute
  authLoginRouteRoute: typeof authLoginRouteRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authCreateAccountRouteRoute: authCreateAccountRouteRoute,
  authLoginRouteRoute: authLoginRouteRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRouteRoute
  '/records': typeof appRecordsRouteRoute
  '/create-account': typeof authCreateAccountRouteRoute
  '/login': typeof authLoginRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof appIndexRouteRoute
  '/records': typeof appRecordsRouteRoute
  '/create-account': typeof authCreateAccountRouteRoute
  '/login': typeof authLoginRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(app)/': typeof appIndexRouteRoute
  '/(app)/records': typeof appRecordsRouteRoute
  '/(auth)/create-account': typeof authCreateAccountRouteRoute
  '/(auth)/login': typeof authLoginRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/records' | '/create-account' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/records' | '/create-account' | '/login'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(app)/'
    | '/(app)/records'
    | '/(auth)/create-account'
    | '/(auth)/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/(auth)"
      ]
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/",
        "/(app)/records"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/create-account",
        "/(auth)/login"
      ]
    },
    "/(app)/": {
      "filePath": "(app)/index/route.tsx",
      "parent": "/(app)"
    },
    "/(app)/records": {
      "filePath": "(app)/records/route.tsx",
      "parent": "/(app)"
    },
    "/(auth)/create-account": {
      "filePath": "(auth)/create-account/route.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login/route.tsx",
      "parent": "/(auth)"
    }
  }
}
ROUTE_MANIFEST_END */
